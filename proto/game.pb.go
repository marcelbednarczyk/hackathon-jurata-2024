// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: game.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MoveType int32

const (
	MoveType_TAKE_CARDS MoveType = 0
	MoveType_FLIP_CARD  MoveType = 1
)

// Enum value maps for MoveType.
var (
	MoveType_name = map[int32]string{
		0: "TAKE_CARDS",
		1: "FLIP_CARD",
	}
	MoveType_value = map[string]int32{
		"TAKE_CARDS": 0,
		"FLIP_CARD":  1,
	}
)

func (x MoveType) Enum() *MoveType {
	p := new(MoveType)
	*p = x
	return p
}

func (x MoveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoveType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_proto_enumTypes[0].Descriptor()
}

func (MoveType) Type() protoreflect.EnumType {
	return &file_game_proto_enumTypes[0]
}

func (x MoveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoveType.Descriptor instead.
func (MoveType) EnumDescriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{0}
}

type VegetableType int32

const (
	VegetableType_BAD_VEGGIE VegetableType = 0
	VegetableType_TOMATO     VegetableType = 1
	VegetableType_CARROT     VegetableType = 2
	VegetableType_LETTUCE    VegetableType = 3
	VegetableType_CABBAGE    VegetableType = 4
	VegetableType_PEPPER     VegetableType = 5
	VegetableType_ONION      VegetableType = 6
)

// Enum value maps for VegetableType.
var (
	VegetableType_name = map[int32]string{
		0: "BAD_VEGGIE",
		1: "TOMATO",
		2: "CARROT",
		3: "LETTUCE",
		4: "CABBAGE",
		5: "PEPPER",
		6: "ONION",
	}
	VegetableType_value = map[string]int32{
		"BAD_VEGGIE": 0,
		"TOMATO":     1,
		"CARROT":     2,
		"LETTUCE":    3,
		"CABBAGE":    4,
		"PEPPER":     5,
		"ONION":      6,
	}
)

func (x VegetableType) Enum() *VegetableType {
	p := new(VegetableType)
	*p = x
	return p
}

func (x VegetableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VegetableType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_proto_enumTypes[1].Descriptor()
}

func (VegetableType) Type() protoreflect.EnumType {
	return &file_game_proto_enumTypes[1]
}

func (x VegetableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VegetableType.Descriptor instead.
func (VegetableType) EnumDescriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{1}
}

type PointType int32

const (
	PointType_BAD_POINT_TYPE PointType = 0
	// PointsPerVegetable
	PointType_POINTS_PER_VEGETABLE_ONE   PointType = 1
	PointType_POINTS_PER_VEGETABLE_TWO   PointType = 2
	PointType_POINTS_PER_VEGETABLE_THREE PointType = 3
	// Sum
	PointType_SUM_TWO   PointType = 4
	PointType_SUM_THREE PointType = 5
	// EvenOdd
	PointType_EVEN_ODD PointType = 6
	// FewestMost
	PointType_FEWEST PointType = 7
	PointType_MOST   PointType = 8
	// Other
	PointType_MOST_TOTAL        PointType = 9
	PointType_FEWEST_TOTAL      PointType = 10
	PointType_COMPLETE_SET      PointType = 11
	PointType_AT_LEAST_TWO      PointType = 12
	PointType_AT_LEAST_THREE    PointType = 13
	PointType_MISSING_VEGETABLE PointType = 14
)

// Enum value maps for PointType.
var (
	PointType_name = map[int32]string{
		0:  "BAD_POINT_TYPE",
		1:  "POINTS_PER_VEGETABLE_ONE",
		2:  "POINTS_PER_VEGETABLE_TWO",
		3:  "POINTS_PER_VEGETABLE_THREE",
		4:  "SUM_TWO",
		5:  "SUM_THREE",
		6:  "EVEN_ODD",
		7:  "FEWEST",
		8:  "MOST",
		9:  "MOST_TOTAL",
		10: "FEWEST_TOTAL",
		11: "COMPLETE_SET",
		12: "AT_LEAST_TWO",
		13: "AT_LEAST_THREE",
		14: "MISSING_VEGETABLE",
	}
	PointType_value = map[string]int32{
		"BAD_POINT_TYPE":             0,
		"POINTS_PER_VEGETABLE_ONE":   1,
		"POINTS_PER_VEGETABLE_TWO":   2,
		"POINTS_PER_VEGETABLE_THREE": 3,
		"SUM_TWO":                    4,
		"SUM_THREE":                  5,
		"EVEN_ODD":                   6,
		"FEWEST":                     7,
		"MOST":                       8,
		"MOST_TOTAL":                 9,
		"FEWEST_TOTAL":               10,
		"COMPLETE_SET":               11,
		"AT_LEAST_TWO":               12,
		"AT_LEAST_THREE":             13,
		"MISSING_VEGETABLE":          14,
	}
)

func (x PointType) Enum() *PointType {
	p := new(PointType)
	*p = x
	return p
}

func (x PointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_proto_enumTypes[2].Descriptor()
}

func (PointType) Type() protoreflect.EnumType {
	return &file_game_proto_enumTypes[2]
}

func (x PointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointType.Descriptor instead.
func (PointType) EnumDescriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{2}
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID        string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	NumberOfGames int32  `protobuf:"varint,2,opt,name=numberOfGames,proto3" json:"numberOfGames,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *Config) GetNumberOfGames() int32 {
	if x != nil {
		return x.NumberOfGames
	}
	return 0
}

type JoinRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID     string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=playerName,proto3" json:"playerName,omitempty"`
}

func (x *JoinRoomRequest) Reset() {
	*x = JoinRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomRequest) ProtoMessage() {}

func (x *JoinRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomRequest.ProtoReflect.Descriptor instead.
func (*JoinRoomRequest) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{1}
}

func (x *JoinRoomRequest) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *JoinRoomRequest) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type GetRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID   string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	PlayerID string `protobuf:"bytes,2,opt,name=playerID,proto3" json:"playerID,omitempty"`
}

func (x *GetRoomRequest) Reset() {
	*x = GetRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomRequest) ProtoMessage() {}

func (x *GetRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomRequest.ProtoReflect.Descriptor instead.
func (*GetRoomRequest) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{2}
}

func (x *GetRoomRequest) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *GetRoomRequest) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

type RoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID        string         `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	PlayerID      string         `protobuf:"bytes,2,opt,name=playerID,proto3" json:"playerID,omitempty"`
	CurrentGame   int32          `protobuf:"varint,3,opt,name=currentGame,proto3" json:"currentGame,omitempty"`
	TotalGames    int32          `protobuf:"varint,4,opt,name=totalGames,proto3" json:"totalGames,omitempty"`
	StartNextGame bool           `protobuf:"varint,5,opt,name=startNextGame,proto3" json:"startNextGame,omitempty"`
	Winner        string         `protobuf:"bytes,6,opt,name=winner,proto3" json:"winner,omitempty"`
	MatchUUID     string         `protobuf:"bytes,7,opt,name=matchUUID,proto3" json:"matchUUID,omitempty"`
	Scores        []*PlayerScore `protobuf:"bytes,8,rep,name=scores,proto3" json:"scores,omitempty"`
	LastGameLog   []byte         `protobuf:"bytes,9,opt,name=lastGameLog,proto3" json:"lastGameLog,omitempty"`
}

func (x *RoomState) Reset() {
	*x = RoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomState) ProtoMessage() {}

func (x *RoomState) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomState.ProtoReflect.Descriptor instead.
func (*RoomState) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{3}
}

func (x *RoomState) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *RoomState) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *RoomState) GetCurrentGame() int32 {
	if x != nil {
		return x.CurrentGame
	}
	return 0
}

func (x *RoomState) GetTotalGames() int32 {
	if x != nil {
		return x.TotalGames
	}
	return 0
}

func (x *RoomState) GetStartNextGame() bool {
	if x != nil {
		return x.StartNextGame
	}
	return false
}

func (x *RoomState) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

func (x *RoomState) GetMatchUUID() string {
	if x != nil {
		return x.MatchUUID
	}
	return ""
}

func (x *RoomState) GetScores() []*PlayerScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *RoomState) GetLastGameLog() []byte {
	if x != nil {
		return x.LastGameLog
	}
	return nil
}

type PlayerScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID   string `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=playerName,proto3" json:"playerName,omitempty"`
	Score      int32  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *PlayerScore) Reset() {
	*x = PlayerScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerScore) ProtoMessage() {}

func (x *PlayerScore) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerScore.ProtoReflect.Descriptor instead.
func (*PlayerScore) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerScore) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *PlayerScore) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PlayerScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerToMove   string           `protobuf:"bytes,1,opt,name=playerToMove,proto3" json:"playerToMove,omitempty"`
	MoveToMake     MoveType         `protobuf:"varint,2,opt,name=moveToMake,proto3,enum=MoveType" json:"moveToMake,omitempty"`
	Market         *Market          `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	YourHand       *Hand            `protobuf:"bytes,4,opt,name=yourHand,proto3" json:"yourHand,omitempty"`
	OpponentsHands []*Hand          `protobuf:"bytes,5,rep,name=opponentsHands,proto3" json:"opponentsHands,omitempty"`
	IsGameOver     bool             `protobuf:"varint,6,opt,name=isGameOver,proto3" json:"isGameOver,omitempty"`
	Winner         string           `protobuf:"bytes,7,opt,name=winner,proto3" json:"winner,omitempty"`
	FinalScores    map[string]int32 `protobuf:"bytes,8,rep,name=finalScores,proto3" json:"finalScores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{5}
}

func (x *GameState) GetPlayerToMove() string {
	if x != nil {
		return x.PlayerToMove
	}
	return ""
}

func (x *GameState) GetMoveToMake() MoveType {
	if x != nil {
		return x.MoveToMake
	}
	return MoveType_TAKE_CARDS
}

func (x *GameState) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *GameState) GetYourHand() *Hand {
	if x != nil {
		return x.YourHand
	}
	return nil
}

func (x *GameState) GetOpponentsHands() []*Hand {
	if x != nil {
		return x.OpponentsHands
	}
	return nil
}

func (x *GameState) GetIsGameOver() bool {
	if x != nil {
		return x.IsGameOver
	}
	return false
}

func (x *GameState) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

func (x *GameState) GetFinalScores() map[string]int32 {
	if x != nil {
		return x.FinalScores
	}
	return nil
}

type MoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID   string   `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	PlayerID string   `protobuf:"bytes,2,opt,name=playerID,proto3" json:"playerID,omitempty"`
	Cards    []string `protobuf:"bytes,3,rep,name=cards,proto3" json:"cards,omitempty"`
	MoveType MoveType `protobuf:"varint,4,opt,name=moveType,proto3,enum=MoveType" json:"moveType,omitempty"`
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{6}
}

func (x *MoveRequest) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *MoveRequest) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *MoveRequest) GetCards() []string {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MoveRequest) GetMoveType() MoveType {
	if x != nil {
		return x.MoveType
	}
	return MoveType_TAKE_CARDS
}

type Hand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointCards []*Card         `protobuf:"bytes,1,rep,name=pointCards,proto3" json:"pointCards,omitempty"`
	Vegetables []*VegtableHeld `protobuf:"bytes,2,rep,name=vegetables,proto3" json:"vegetables,omitempty"`
}

func (x *Hand) Reset() {
	*x = Hand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hand) ProtoMessage() {}

func (x *Hand) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hand.ProtoReflect.Descriptor instead.
func (*Hand) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{7}
}

func (x *Hand) GetPointCards() []*Card {
	if x != nil {
		return x.PointCards
	}
	return nil
}

func (x *Hand) GetVegetables() []*VegtableHeld {
	if x != nil {
		return x.Vegetables
	}
	return nil
}

type VegtableHeld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VegetableType VegetableType `protobuf:"varint,1,opt,name=vegetableType,proto3,enum=VegetableType" json:"vegetableType,omitempty"`
	Count         int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *VegtableHeld) Reset() {
	*x = VegtableHeld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VegtableHeld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VegtableHeld) ProtoMessage() {}

func (x *VegtableHeld) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VegtableHeld.ProtoReflect.Descriptor instead.
func (*VegtableHeld) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{8}
}

func (x *VegtableHeld) GetVegetableType() VegetableType {
	if x != nil {
		return x.VegetableType
	}
	return VegetableType_BAD_VEGGIE
}

func (x *VegtableHeld) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointCards     []*Card `protobuf:"bytes,1,rep,name=pointCards,proto3" json:"pointCards,omitempty"`
	VegetableCards []*Card `protobuf:"bytes,2,rep,name=vegetableCards,proto3" json:"vegetableCards,omitempty"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{9}
}

func (x *Market) GetPointCards() []*Card {
	if x != nil {
		return x.PointCards
	}
	return nil
}

func (x *Market) GetVegetableCards() []*Card {
	if x != nil {
		return x.VegetableCards
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardID             string              `protobuf:"bytes,1,opt,name=cardID,proto3" json:"cardID,omitempty"`
	Vegetable          VegetableType       `protobuf:"varint,2,opt,name=vegetable,proto3,enum=VegetableType" json:"vegetable,omitempty"`
	PointType          PointType           `protobuf:"varint,3,opt,name=pointType,proto3,enum=PointType" json:"pointType,omitempty"`
	PointsPerVegetable *PointsPerVegetable `protobuf:"bytes,4,opt,name=pointsPerVegetable,proto3" json:"pointsPerVegetable,omitempty"`
	Sum                *Sum                `protobuf:"bytes,5,opt,name=sum,proto3" json:"sum,omitempty"`
	EvenOdd            *EvenOdd            `protobuf:"bytes,6,opt,name=evenOdd,proto3" json:"evenOdd,omitempty"`
	FewestMost         *FewestMost         `protobuf:"bytes,7,opt,name=fewestMost,proto3" json:"fewestMost,omitempty"`
	Other              *Other              `protobuf:"bytes,8,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{10}
}

func (x *Card) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *Card) GetVegetable() VegetableType {
	if x != nil {
		return x.Vegetable
	}
	return VegetableType_BAD_VEGGIE
}

func (x *Card) GetPointType() PointType {
	if x != nil {
		return x.PointType
	}
	return PointType_BAD_POINT_TYPE
}

func (x *Card) GetPointsPerVegetable() *PointsPerVegetable {
	if x != nil {
		return x.PointsPerVegetable
	}
	return nil
}

func (x *Card) GetSum() *Sum {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *Card) GetEvenOdd() *EvenOdd {
	if x != nil {
		return x.EvenOdd
	}
	return nil
}

func (x *Card) GetFewestMost() *FewestMost {
	if x != nil {
		return x.FewestMost
	}
	return nil
}

func (x *Card) GetOther() *Other {
	if x != nil {
		return x.Other
	}
	return nil
}

type PointsPerVegetable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*VegetablePoints `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *PointsPerVegetable) Reset() {
	*x = PointsPerVegetable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsPerVegetable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsPerVegetable) ProtoMessage() {}

func (x *PointsPerVegetable) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsPerVegetable.ProtoReflect.Descriptor instead.
func (*PointsPerVegetable) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{11}
}

func (x *PointsPerVegetable) GetPoints() []*VegetablePoints {
	if x != nil {
		return x.Points
	}
	return nil
}

type Sum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points     int32           `protobuf:"varint,1,opt,name=points,proto3" json:"points,omitempty"`
	Vegetables []VegetableType `protobuf:"varint,2,rep,packed,name=vegetables,proto3,enum=VegetableType" json:"vegetables,omitempty"`
}

func (x *Sum) Reset() {
	*x = Sum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sum) ProtoMessage() {}

func (x *Sum) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sum.ProtoReflect.Descriptor instead.
func (*Sum) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{12}
}

func (x *Sum) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Sum) GetVegetables() []VegetableType {
	if x != nil {
		return x.Vegetables
	}
	return nil
}

type EvenOdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Even      int32         `protobuf:"varint,1,opt,name=even,proto3" json:"even,omitempty"`
	Odd       int32         `protobuf:"varint,2,opt,name=odd,proto3" json:"odd,omitempty"`
	Vegetable VegetableType `protobuf:"varint,3,opt,name=vegetable,proto3,enum=VegetableType" json:"vegetable,omitempty"`
}

func (x *EvenOdd) Reset() {
	*x = EvenOdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvenOdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvenOdd) ProtoMessage() {}

func (x *EvenOdd) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvenOdd.ProtoReflect.Descriptor instead.
func (*EvenOdd) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{13}
}

func (x *EvenOdd) GetEven() int32 {
	if x != nil {
		return x.Even
	}
	return 0
}

func (x *EvenOdd) GetOdd() int32 {
	if x != nil {
		return x.Odd
	}
	return 0
}

func (x *EvenOdd) GetVegetable() VegetableType {
	if x != nil {
		return x.Vegetable
	}
	return VegetableType_BAD_VEGGIE
}

type FewestMost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points    int32         `protobuf:"varint,1,opt,name=points,proto3" json:"points,omitempty"`
	Vegetable VegetableType `protobuf:"varint,2,opt,name=vegetable,proto3,enum=VegetableType" json:"vegetable,omitempty"`
}

func (x *FewestMost) Reset() {
	*x = FewestMost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FewestMost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FewestMost) ProtoMessage() {}

func (x *FewestMost) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FewestMost.ProtoReflect.Descriptor instead.
func (*FewestMost) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{14}
}

func (x *FewestMost) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *FewestMost) GetVegetable() VegetableType {
	if x != nil {
		return x.Vegetable
	}
	return VegetableType_BAD_VEGGIE
}

type Other struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points int32 `protobuf:"varint,1,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *Other) Reset() {
	*x = Other{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Other) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Other) ProtoMessage() {}

func (x *Other) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Other.ProtoReflect.Descriptor instead.
func (*Other) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{15}
}

func (x *Other) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type VegetablePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points    int32         `protobuf:"varint,1,opt,name=points,proto3" json:"points,omitempty"`
	Vegetable VegetableType `protobuf:"varint,2,opt,name=vegetable,proto3,enum=VegetableType" json:"vegetable,omitempty"`
}

func (x *VegetablePoints) Reset() {
	*x = VegetablePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VegetablePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VegetablePoints) ProtoMessage() {}

func (x *VegetablePoints) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VegetablePoints.ProtoReflect.Descriptor instead.
func (*VegetablePoints) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{16}
}

func (x *VegetablePoints) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *VegetablePoints) GetVegetable() VegetableType {
	if x != nil {
		return x.Vegetable
	}
	return VegetableType_BAD_VEGGIE
}

var File_game_proto protoreflect.FileDescriptor

var file_game_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x44, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa5, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x22, 0x5f, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x84,
	0x03, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x4d, 0x6f, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4d, 0x61, 0x6b, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x08,
	0x79, 0x6f, 0x75, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x79, 0x6f, 0x75, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x12,
	0x2d, 0x0a, 0x0e, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x0e,
	0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25,
	0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x09, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x04, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x25, 0x0a,
	0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x65, 0x67, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x0c, 0x56, 0x65, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x56, 0x65, 0x67,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x76, 0x65, 0x67, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5e, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x0e, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x0e, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22,
	0xc2, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x09, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x56, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x56, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x56, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x56, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x03, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x53, 0x75, 0x6d,
	0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x4f, 0x64, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x4f, 0x64, 0x64,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x4f, 0x64, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x66, 0x65, 0x77,
	0x65, 0x73, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x46, 0x65, 0x77, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x66, 0x65, 0x77, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x12, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x56, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x65, 0x67,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x56, 0x65, 0x67, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x4f, 0x64, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x76, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x76,
	0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6f, 0x64, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x56, 0x65, 0x67, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x52, 0x0a, 0x0a, 0x46, 0x65, 0x77, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x76, 0x65, 0x67, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x56, 0x65,
	0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x65, 0x67,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1f, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x56, 0x65, 0x67, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x56, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2a, 0x29, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x41, 0x4b, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x4c, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x2a, 0x68, 0x0a, 0x0d, 0x56,
	0x65, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x41, 0x44, 0x5f, 0x56, 0x45, 0x47, 0x47, 0x49, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x4f, 0x4d, 0x41, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x52, 0x52,
	0x4f, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x54, 0x54, 0x55, 0x43, 0x45, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x42, 0x42, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x45, 0x50, 0x50, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x4e,
	0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0xac, 0x02, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f,
	0x50, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x57,
	0x4f, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x56, 0x45, 0x4e, 0x5f, 0x4f, 0x44, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x45, 0x57, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x53,
	0x54, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x45, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x5f, 0x4c, 0x45,
	0x41, 0x53, 0x54, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f,
	0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x0e, 0x32, 0xde, 0x01, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x08,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x10, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a,
	0x08, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x0c, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_game_proto_rawDescOnce sync.Once
	file_game_proto_rawDescData = file_game_proto_rawDesc
)

func file_game_proto_rawDescGZIP() []byte {
	file_game_proto_rawDescOnce.Do(func() {
		file_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_proto_rawDescData)
	})
	return file_game_proto_rawDescData
}

var file_game_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_game_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_game_proto_goTypes = []any{
	(MoveType)(0),              // 0: MoveType
	(VegetableType)(0),         // 1: VegetableType
	(PointType)(0),             // 2: PointType
	(*Config)(nil),             // 3: Config
	(*JoinRoomRequest)(nil),    // 4: JoinRoomRequest
	(*GetRoomRequest)(nil),     // 5: GetRoomRequest
	(*RoomState)(nil),          // 6: RoomState
	(*PlayerScore)(nil),        // 7: PlayerScore
	(*GameState)(nil),          // 8: GameState
	(*MoveRequest)(nil),        // 9: MoveRequest
	(*Hand)(nil),               // 10: Hand
	(*VegtableHeld)(nil),       // 11: VegtableHeld
	(*Market)(nil),             // 12: Market
	(*Card)(nil),               // 13: Card
	(*PointsPerVegetable)(nil), // 14: PointsPerVegetable
	(*Sum)(nil),                // 15: Sum
	(*EvenOdd)(nil),            // 16: EvenOdd
	(*FewestMost)(nil),         // 17: FewestMost
	(*Other)(nil),              // 18: Other
	(*VegetablePoints)(nil),    // 19: VegetablePoints
	nil,                        // 20: GameState.FinalScoresEntry
}
var file_game_proto_depIdxs = []int32{
	7,  // 0: RoomState.scores:type_name -> PlayerScore
	0,  // 1: GameState.moveToMake:type_name -> MoveType
	12, // 2: GameState.market:type_name -> Market
	10, // 3: GameState.yourHand:type_name -> Hand
	10, // 4: GameState.opponentsHands:type_name -> Hand
	20, // 5: GameState.finalScores:type_name -> GameState.FinalScoresEntry
	0,  // 6: MoveRequest.moveType:type_name -> MoveType
	13, // 7: Hand.pointCards:type_name -> Card
	11, // 8: Hand.vegetables:type_name -> VegtableHeld
	1,  // 9: VegtableHeld.vegetableType:type_name -> VegetableType
	13, // 10: Market.pointCards:type_name -> Card
	13, // 11: Market.vegetableCards:type_name -> Card
	1,  // 12: Card.vegetable:type_name -> VegetableType
	2,  // 13: Card.pointType:type_name -> PointType
	14, // 14: Card.pointsPerVegetable:type_name -> PointsPerVegetable
	15, // 15: Card.sum:type_name -> Sum
	16, // 16: Card.evenOdd:type_name -> EvenOdd
	17, // 17: Card.fewestMost:type_name -> FewestMost
	18, // 18: Card.other:type_name -> Other
	19, // 19: PointsPerVegetable.points:type_name -> VegetablePoints
	1,  // 20: Sum.vegetables:type_name -> VegetableType
	1,  // 21: EvenOdd.vegetable:type_name -> VegetableType
	1,  // 22: FewestMost.vegetable:type_name -> VegetableType
	1,  // 23: VegetablePoints.vegetable:type_name -> VegetableType
	3,  // 24: Game.NewRoom:input_type -> Config
	4,  // 25: Game.JoinRoom:input_type -> JoinRoomRequest
	5,  // 26: Game.GetRoomState:input_type -> GetRoomRequest
	5,  // 27: Game.GetCurrentGameState:input_type -> GetRoomRequest
	9,  // 28: Game.MakeMove:input_type -> MoveRequest
	3,  // 29: Game.NewRoom:output_type -> Config
	6,  // 30: Game.JoinRoom:output_type -> RoomState
	6,  // 31: Game.GetRoomState:output_type -> RoomState
	8,  // 32: Game.GetCurrentGameState:output_type -> GameState
	8,  // 33: Game.MakeMove:output_type -> GameState
	29, // [29:34] is the sub-list for method output_type
	24, // [24:29] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_game_proto_init() }
func file_game_proto_init() {
	if File_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_game_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*JoinRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Hand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*VegtableHeld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PointsPerVegetable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Sum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*EvenOdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*FewestMost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Other); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*VegetablePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_game_proto_goTypes,
		DependencyIndexes: file_game_proto_depIdxs,
		EnumInfos:         file_game_proto_enumTypes,
		MessageInfos:      file_game_proto_msgTypes,
	}.Build()
	File_game_proto = out.File
	file_game_proto_rawDesc = nil
	file_game_proto_goTypes = nil
	file_game_proto_depIdxs = nil
}
